Guia Intercambios de Datos con GraphQl
GraphQL-Node.js
FrontEnd Js-Backend Node.js
1-Creamos el Proyecto de Node.js en Terminal
npm init -y
2-Crear Server, en este caso Express.js
npm i express
3-Creo carpeta Src y dentro el archivo index.js
Creamos el Server Express, lo instanciamos y lo ejecutamos en el puerto 3000
(probamos que funcione con node src/index.js y en navegador localhost:(port))
Nota: usaremos Babel para transpilar y/o compilador para utilizar las ultimas
versiones de Js. (Ej. EcmaScript 2019) y al convertirlo Node.js lo va a entender,
Ej: Node.js hasta el momento no soporta Import de Modulos, solo usa
el Require.
Instalaci贸n de Babel en Node.js npm install --save-dev @babel/core @babel/cli @babel/preset-env
Una vez instalado, configuraremos que vamos a convertir en Babel en el archivo .babelrc:
{"presets":[ "@babel/preset-env"]} usando este solo compilara las ultimas versiones de Js
Posteriormente, instalaremos el modulo de Node.js para usar Babel como Desarrollo
npm i @babel/node -D
4-Crearemos el Script de Conversi贸n, Ejecucion, Compilacion y Despliegue en package.json
"scripts": {
    "build": "babel src -d dist --source-maps",//modulo para convertir, ubicacion y opci贸n para debbugear
    //al terminar si esta compilado, se puede ejecutar con node dist/index.js    
    //"start": "babel-node src/index.js",//para ejecutarlo transpilado
    //cuando estemos desarrollando usando Nodemon usamos el Start
    //usamos este para no crear un archivo nodemon.json    
    "start": "nodemon src/index.js --exec babel-node",
    
    //este para ejecutarlo con Node.js
    "serve": "node dist/index.js"

}
4.1-Instalaremos el modulo Nodemon, para reiniciar automaticamente el Server
de Node.js:  npm i nodemon
Modulo RimRaf para eliminar carpetas multiplataforma: npm i rimraf
lo agregamos en script para borrar la carpeta /dist : "clean": "rimraf dist"

5-Integraci贸n de GraphQL
npm i graphql express-graphql graphql-tools
*en index.js
//Necesitamos importar el modulo de GraphQl
//y el Middleware de express para que la ruta 
// sea procesada utilizando una herramienta de GraphQl
import graphqlHTTP from "express-graphql";
//cuando se ingrese a cierta ruta devuelva una Herramienta que la procese
app.get('/', (req, res) => {
    res.json({
        message: 'Hello World!!!!'
    })
});
app.use('/graphql', graphqlHTTP({

}));
//Si ingresamos en la ruta localhost:3000/graphql
nos da el mensaje en el navegador
{"errors":[{"message":"GraphQL middleware options must contain a schema."}]}
**Debemos enviarle un Schema y la herramienta de interfaz de GraphQl
const schema = {}
app.use('/graphql', graphqlHTTP({
    graphiql: true,
    schema: schema
}));
6-Creamos un Schema para definir que es lo que se puede consultar
  y lo crearemos en un archivo aparte 
7-Continuamos con la creacion en Schema de los TypeDefs
//importamos Herramienta para integrar los TypeDefs y Resolvers en un 
//nuevo Schema que pueden cambiar Dinamicamente
import { makeExecutableSchema } from "graphql-tools" 
//importamos el objeto Resolvers que estan dentro de otro objeto
import {  resolvers } from "./resolvers"; 
//Definimos los typeDefs (tipos de Datos) a Consultar
//Las Query pueden ser propiedades
//Tipos de Datos: String, Int, Float, Boolean and Id
//con el "!" le decimos que si o si necesitamos esa propiedad
//estas serian equivalentes a las Rutas del Server
//Creamos un arreglo de tareas y definimos su tipo
//como sabe que tipo de dato puede ser Id (Int o String) su tipo de dato sera ID
//se puede enviar cosas y cambiarlas dentro del Server
//usando TypeMutation podes consultar y enviarle datos para cambiar en el Server
//En este caso creamos el tipo TaskInput para recibir los datos y el _Id agrega automaticamente
const typeDefs = `

    type Query {
        hello: String
        greet(name: String!): String
        tasks: [Tasks]
        Users: [User]

    }
    type Tasks{
        _id: ID
        title: String!
        description: String!
        number: Int
    }
    type User {
        _id: ID
        firstname: String!
        lastname: String!
        age: Int

    }
    type Mutation{
        createTask(input: TaskInput): Tasks
        createUser(input: UserInput): User
        deleteUser(_id:ID): User
        updateUser(_id: ID, input: UserInput): User
    }
    input TaskInput {
        title: String!
        description: String!
        number: Int
    }
    input UserInput {
        firstname: String!
        lastname: String!
        age: Int
    }


`;
//Creamos el Nuevo Schema para vincular los TypeDefs y los resolvers
//y lo exportamos
export default makeExecutableSchema({
    typeDefs: typeDefs,
    resolvers: resolvers
})
8-Creamos los Resolvers que seran los controladores de las Querys que hara el Cliente
//Definimos los Resolver que es lo que vamos a hacer
//cuando Consulten algo, se pueden anidar las Querys con root
//esto es similar como los Controllers de las Rutas del Server
//creamos un arreglo de tareas y lo importamos
import { tasks } from './sample'
//Tambien sera el encargado de utilizar el modelo de la BBDD
//para las operaciones con la BBDD
import User from './models/User'

export const resolvers = {
    Query: {
        hello: () => {
            return "Hello World with GraphQl"
        },
        greet(root, { name }, ctx){
            console.log(ctx)
            //se puede hacer Querys Anidadas
            //console.log(args.name);
            //con destructuring puede pedir solo una propiedad especifica
            return `Hello ${name}!!!`;
        },
        tasks(){ 
            return tasks;
        },
        async Users(){
            return await User.find();        }
    },
    Mutation: {
        createTask(_,{ input }) {
            input._id = tasks.length;
            //para guardar el input
            tasks.push(input);
            return input;
        },
        async createUser(_, { input }){
            const newUser = new User(input);
            //para guardar el input
            await newUser.save();
            return newUser;
        },
        async updateUser(_, { _id, input}){
            //aca Mongoose devuelve el Dato No Modificado
           return await User.findByIdAndUpdate(_id, input, { new: true });
        },
        async deleteUser(_,{ _id }){
            //Cuando Moongose elimina un dato lo retorna como info
            return await User.findByIdAndDelete(_id);
        }
    } 
};
9-instalamos el modulo mongoose para la interaccion con una BBDD de MongoDB
npm i mongoose
10-instalamos el modulo dotenv para ocultar las variables de entorno de nuestro propio sistema
npm i dotenv
11-Creamos el archivo de conexion con la BBDD llamada en index.js

